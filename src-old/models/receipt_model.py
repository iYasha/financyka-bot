from models.base_model import BaseModel
import sqlite3
from dataclasses import dataclass
from dataclasses_json import dataclass_json
from typing import Optional


@dataclass
class Point:
    lat: float = 0.0
    lng: float = 0.0


@dataclass
class City:
    address: str = ''
    location: Point = Point()


@dataclass_json
@dataclass
class Receipt:
    chat_id: int
    created_at: int
    shop_name: Optional[str] = None
    amount: Optional[float] = None
    address: Optional[str] = None
    lat: Optional[float] = None
    lng: Optional[float] = None
    buy_time: Optional[str] = None
    image_path: Optional[str] = None


class ReceiptModel(BaseModel):
    # Text markup
    exception_receipt_text: str = '‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: </b> ‚ö†Ô∏è\n' \
                                  '<code>%s</code>\n\n' \
                                  '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∑–∂–µ, –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É ' \
                                  '<b>@iYashaDesign</b> '
    success_parse_receipt: str = 'üé∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞</b> üé∞\n\n' \
                                 '<i>–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:</i> <code>%s</code>\n' \
                                 '<i>–°—É–º–º–∞ —á–µ–∫–∞:</i> <code>%.2f –≥—Ä–Ω</code>\n' \
                                 '<i>–ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞:</i> <code>%s</code>\n' \
                                 '<i>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</i> <code>%s</code>\n'

    # Text
    receipt_main_text: str = '–í–∞—à–∏ —á–µ–∫–∏: '
    scan_text: str = '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º'

    # Exceptions
    photo_not_found = '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    cant_save_receipt = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª'
    cant_get_receipt_info = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —á–µ–∫–∞'

    def __init__(self, db: sqlite3.Cursor):
        self._db = db

    def get_receipts(self, chat_id: int, limit=5):
        return []

    def create_receipt(self, receipt: Receipt) -> int:
        values = ", ".join(["'" + str(x).replace('"', '').replace("'", '') + "'" for x in receipt.to_dict().values()])
        request = 'INSERT OR REPLACE INTO `receipts`' \
                  f'({", ".join([x for x in Receipt.__annotations__])}) ' \
                  f'VALUES({values});'
        return self._db.execute(request).lastrowid
